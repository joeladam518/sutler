#!/usr/bin/env python3

import argparse
import subprocess
import sys
from collections import OrderedDict


# functions
def confirm(question: str, default: bool = False) -> bool:
    tries = 2
    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
    prompt = " [Y/n]" if default else " [y/N]"

    while tries > 0:
        choice = input(question + prompt + " ").lower()
        if choice in valid:
            return valid[choice]

        tries = tries - 1

        if tries > 0:
            print("Please enter 'yes' or 'no'.")

    return default


def extensionize(extension: str, version: str = '') -> str:
    return f"php{version}-{extension}"


def list_exclude(items: list, excluded: list) -> list:
    for exclude in excluded:
        try:
            items.remove(exclude)
        except ValueError:
            pass

    return items


def list_extensionize(extensions: list, version: str = '') -> list:
    return list(map(lambda ext: extensionize(ext, version), extensions))


def list_unique(items: list) -> list:
    return list(OrderedDict.fromkeys(items))


# The extension lists
php_extensions = {
    "common": [
        'bcmath',
        'cli',
        'common',
        'curl',
        'mbstring',
        'mysql',
        'opcache',
        'pgsql',
        'readline',
        'sqlite3',
        'xml',
        'zip',
    ],
    "desktop": [],
    "development": [
        'intl',
        'dev',
        'igbinary',
        'memcached',
        # 'pcov',  # code coverage
        'redis',
        'xdebug',
    ],
    "server": [
        'fpm',
        'gd',
        'igbinary',
        'memcached',
        # 'imap',  # work with IMAP protocol, as well as the NNTP, POP3 and local mailbox access methods.
        'intl',
        'redis',
    ],
}

# Parse commandline args
parser = argparse.ArgumentParser(description='Install php for a given environment.')
parser.add_argument(
    'version',
    action='store',
    type=str,
    help='The version to install.',
    choices=['7.4', '8.0', '8.1'],
    default='8.0'
)
parser.add_argument(
    '--env',
    '-e',
    action='store',
    type=str,
    help='The type of environment your installing php on',
    choices=['desktop', 'development', 'server'],
    default='desktop'
)
parser.add_argument(
    '--additional',
    '-a',
    action='extend',
    nargs="+",
    type=str,
    help='Additional extensions you want to install',
    default=[]
)
parser.add_argument(
    '--exclude',
    '-x',
    action='extend',
    nargs="+",
    type=str,
    help='Extensions you want to exclude',
    default=[]
)
parser.add_argument(
    '--verbose',
    '-v',
    action='count',
    help='Verbosity',
    default=0
)
args = parser.parse_args()

# Build the packages to be installed
packages = [*php_extensions["common"], *php_extensions[args.env], *args.additional]

if float(args.version) < 8.0:
    packages.append('json')

packages = list_unique(packages)
packages = list_exclude(packages, args.exclude)
packages = list_extensionize(packages, args.version)
packages = [f"php{args.version}", *packages]

if args.verbose > 0:
    print("")
    print(f"          php version: {args.version}")
    print(f"          environment: {args.env}")
    print(f"additional extensions: {', '.join(args.additional)}")
    print(f"  excluded extensions: {', '.join(args.exclude)}")

print("")
print("Extensions to be installed:")
print(*packages, sep='\n')

print("")
if not confirm('Proceed with the install?'):
    sys.exit(0)

subprocess.call(["sudo apt update"], shell=True)
subprocess.call([f"sudo apt install -y {' '.join(packages)}"], shell=True)

sys.exit(0)

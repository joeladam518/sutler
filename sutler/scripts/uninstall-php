#!/usr/bin/env python3

import argparse
import subprocess
import sys


# functions
def confirm(question: str, default: bool = False) -> bool:
    tries = 2
    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
    prompt = " [Y/n]" if default else " [y/N]"

    while tries > 0:
        choice = input(question + prompt + " ").lower()
        if choice in valid:
            return valid[choice]

        tries = tries - 1

        if tries > 0:
            print("Please enter 'yes' or 'no'.")

    return default


def get_installed_packages(version) -> list:
    php_packages = subprocess.check_output(
        "dpkg -l | grep php%s | sed 's/\s\{3,\}.*$//' | sed 's/^ii  //' | tr '\n' ' '" % version,
        shell=True
    )
    php_packages = php_packages.decode('utf-8')
    php_packages = php_packages.strip()
    php_packages = php_packages.split(' ')

    return list(filter(lambda package: bool(package), php_packages))


# Parse some args
parser = argparse.ArgumentParser(description='Uninstall php for a given environment.')
parser.add_argument(
    'version',
    action='store',
    type=str,
    help='The version to uninstall.',
    choices=['5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1']
)
args = parser.parse_args()

packages = get_installed_packages(args.version)

if len(packages) == 0:
    print(f"No packages found for php{args.version}")
    sys.exit(0)

print("")
print('Packages to be uninstalled:')
print(*packages, sep='\n')

print("")
if not confirm('Proceed with the uninstall?'):
    sys.exit(0)

subprocess.run(f"sudo apt purge -y {' '.join(packages)}", shell=True)
subprocess.run("sudo apt-get --purge autoremove -y", shell=True)

sys.exit(0)

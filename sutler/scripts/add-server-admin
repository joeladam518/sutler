#!/usr/bin/env bash

if [ "$EUID" -ne 0 ]; then
    echo "Please run as root"
    exit 1
fi

set -o pipefail

usage() {
    cat << EOF
Usage: $(basename "${0}") [-h] {user_name}

Add a new admin user on a Digital Ocean droplet and create a temporary
password for them. Once set the user will be forced to reset the
password on their fist login.

arguments:
user_name           The user to create.

Options:
-h, --help          Print this help and exit
EOF
    return 0
}

invalid_argument() {
    echo "Invalid option: -${1} requires an argument" 1>&2
    exit 1
}

invalid_option() {
    echo "Invalid option: -${1}" 1>&2
    exit 1
}

parse_long_options() {
    case "$1" in
        help) usage; exit ;;
        *) invalid_option "-${OPTARG}" ;;
    esac

    return 0
}

parse_options() {
    while getopts ":h-:" opt; do
        case "$opt" in
            h) usage; exit ;;
            :) invalid_argument "$OPTARG" ;;
            -) parse_long_options "$OPTARG" ;;
            \?) invalid_option "$OPTARG" ;;
        esac
    done

    shift $((OPTIND-1))

    return 0
}

# Input
parse_options "$@"

user_name="${1:-""}"
user_home="${2:-"/home/${user_name}"}"
user_tmp_pwd="$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 32 | head -n 1)"

if [ -z "$user_name" ]; then
    echo "You must enter a user name" 1>&2
    exit 1
fi

if [ -z "$user_tmp_pwd" ] || [ "${#user_tmp_pwd}" != "32" ]; then
    echo "Failed to create tmp password" 1>&2
    exit 1
fi

# Make sure we have authorized_keys in the root dir. If we don't we will effectively lockout all users.
if [ ! -f "${HOME}/.ssh/authorized_keys" ]; then
    echo "Could not find the root user's authorized_keys file" 1>&2
    exit 1
fi

# Create the new user
if ! adduser --disabled-password --debug --gecos "Server Admin" "$user_name"; then
    echo "Failed to create user" 1>&2
    return 1
fi

# Update the new user's password to the temp password
if ! echo -e "${user_tmp_pwd}\n${user_tmp_pwd}" | passwd "$user_name"; then
    echo "Failed to set the user's temp password" 1>&2
    exit 1
fi

# Grant the new user sudo
if ! usermod -aG sudo "$user_name"; then
    echo "Failed to add the new user to the sudo group" 1>&2
    exit 1
fi

# Create the user's ssh keys
if ! su -c "cd ${user_home} && ssh-keygen -q -b 2048 -t rsa -f ~/.ssh/id_rsa -N ''" - "${user_name}"; then
    echo "Failed to create user ssh keys" 1>&2
    exit 1
fi

# Copy root's authorized keys to the new user
cat "${HOME}/.ssh/authorized_keys" > "${user_home}/.ssh/authorized_keys"

# Secure authorized keys
chown "${user_name}:${user_name}" "${user_home}/.ssh/authorized_keys"
chmod 0600 "${user_home}/.ssh/authorized_keys"

# Truncate root's authorized keys file
echo > "${HOME}/.ssh/authorized_keys"

# Change some values in sshd_config
sed -i "s/#\?\s*PermitRootLogin.*/PermitRootLogin no/" /etc/ssh/sshd_config
sed -i "s/#\?\s*PasswordAuthentication.*/PasswordAuthentication no/" /etc/ssh/sshd_config
sed -i "s/#\?\s*PubkeyAuthentication.*/PubkeyAuthentication yes/" /etc/ssh/sshd_config
sed -i "s/#\?\s*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/" /etc/ssh/sshd_config
systemctl reload sshd

# Force password change on next login
chage -d 0 "$user_name"

echo
echo "*******************  Warning  *******************"
echo "The new user will be forced to set a new password upon logging in for the first time"
echo "They will need the following temp password to do that:"
echo
echo "$user_tmp_pwd"
echo
echo "*************************************************"
echo
